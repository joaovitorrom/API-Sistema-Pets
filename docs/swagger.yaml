openapi: 3.0.0
info:
  title: API de Adoção de Pets
  version: "1.0.0"
  description: API RESTful para gerenciar adoções de pets, incluindo CRUD de Pets e Usuários.
  contact:
    email: joaoromani@unect.com.br
servers:
  - url: http://localhost:5000
    description: Servidor de Desenvolvimento
components:
  schemas:
    Pet:
      type: object
      properties:
        _id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: ID único do pet gerado pelo MongoDB.
          readOnly: true
          example: "60d0fe4f5311236168a109ca"
        name:
          type: string
          description: Nome do pet.
          example: "Rex"
        age:
          type: integer
          description: Idade do pet em anos.
          example: 2
        weight:
          type: number
          format: float
          description: Peso do pet em kg.
          example: 10.5
        color:
          type: string
          description: Cor predominante do pet.
          example: "Caramelo"
        available:
          type: boolean
          description: Indica se o pet está disponível para adoção.
          default: true
        user:
          type: object
          readOnly: true
          description: Informações do usuário que cadastrou o pet.
          properties:
            _id:
              type: string
              pattern: '^[0-9a-fA-F]{24}$'
              example: "60d0fe4f5311236168a109cb"
            name:
              type: string
              example: "Dono do Pet"
            phone:
              type: string
              example: "(11) 99999-8888"
        adopter:
          type: object
          nullable: true
          readOnly: true
          description: Informações do usuário que demonstrou interesse ou agendou visita (se houver).
          properties:
            _id:
              type: string
              pattern: '^[0-9a-fA-F]{24}$'
              example: "60d0fe4f5311236168a109cc"
            name:
              type: string
              example: "Interessado no Pet"
        createdAt:
          type: string
          format: date-time
          description: Data de criação do registro.
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Data da última atualização do registro.
          readOnly: true
    PetInput:
      type: object
      required:
        - name
        - age
        - weight
        - color
      properties:
        name:
          type: string
          description: Nome do pet.
          example: "Bolinha"
        age:
          type: integer
          description: Idade do pet em anos.
          example: 1
        weight:
          type: number
          description: Peso do pet em kg.
          example: 3.2
        color:
          type: string
          description: Cor predominante do pet.
          example: "Branco"
    PetUpdateInput:
      type: object
      required:
        - name
        - age
        - weight
        - color
      properties:
        name:
          type: string
          example: "Bolinha Editado"
        age:
          type: integer
          example: 2
        weight:
          type: number
          example: 3.5
        color:
          type: string
          example: "Branco e Preto"
        available:
          type: boolean
          description: Se o pet ainda está disponível.
          example: true
    User:
      type: object
      properties:
        _id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: ID único do usuário gerado pelo MongoDB.
          readOnly: true
          example: "60d0fe4f5311236168a109cb"
        name:
          type: string
          example: "João Silva"
        email:
          type: string
          format: email
          example: "joao.silva@example.com"
        phone:
          type: string
          example: "(11) 98765-4321"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    UserRegisterInput:
      type: object
      required:
        - name
        - email
        - phone
        - password
        - confirmpassword
      properties:
        name:
          type: string
          example: "João Jota"
        email:
          type: string
          format: email
          example: "joao.jota@example.com"
        phone:
          type: string
          example: "(21) 91234-5678"
        password:
          type: string
          format: password
          example: "Senha@123"
        confirmpassword:
          type: string
          format: password
          example: "Senha@123"
    UserLoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "joao.silva@example.com"
        password:
          type: string
          format: password
          example: "Senha@123"
    UserUpdateInput:
      type: object
      required:
        - name
        - email
        - phone
      properties:
        name:
          type: string
          example: "João Silva Atualizado"
        email:
          type: string
          format: email
          example: "joao.silva.novo@example.com"
        phone:
          type: string
          example: "(11) 98888-7777"
        password:
          type: string
          format: password
          description: Opcional. Envie apenas se desejar alterar a senha.
          example: "NovaSenha@456"
        confirmpassword:
          type: string
          format: password
          description: Opcional. Obrigatório se 'password' for enviado.
          example: "NovaSenha@456"
    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Você está autenticado"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    SimpleErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Descrição do erro."
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
tags:
  - name: Usuários
    description: Autenticação e gerenciamento de perfil de usuários
  - name: Pets
    description: Operações relacionadas a pets
  - name: Adoção
    description: Processos de agendamento e conclusão de adoção
paths:
  /users/register:
    post:
      tags:
        - Usuários
      summary: Registra um novo usuário
      description: Cria uma nova conta de usuário no sistema.
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
      responses:
        '200':
          description: Usuário registrado e logado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Conflito (e-mail já cadastrado).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '422':
          description: Erro de validação nos dados enviados (campos obrigatórios, formato de e-mail, senhas não conferem).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /users/login:
    post:
      tags:
        - Usuários
      summary: Autentica um usuário
      description: Realiza o login do usuário e retorna um token JWT.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
      responses:
        '200':
          description: Login bem-sucedido, token JWT retornado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Autenticação falhou (e-mail não cadastrado ou senha inválida).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '422':
          description: Dados de entrada inválidos (formato do e-mail, campos faltando).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /users/checkuser:
    get:
      tags:
        - Usuários
      summary: Verifica o usuário logado
      description: Retorna os dados do usuário atualmente autenticado com base no token JWT enviado no header Authorization. Se nenhum token válido for fornecido, retorna null.
      operationId: checkCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário autenticado (ou null se não houver token válido ou se o token for inválido).
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - type: "null"
        '500':
          description: Erro interno do servidor (ex: falha ao decodificar token JWT malformado).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID do Usuário (MongoDB ObjectId).
        schema:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "60d0fe4f5311236168a109cb"
    get:
      tags:
        - Usuários
      summary: Busca um usuário pelo ID
      description: Retorna dados públicos de um usuário específico. Não requer autenticação.
      operationId: getUserById
      security: []
      responses:
        '200':
          description: Dados do usuário (sem senha).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Usuário não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /users/edit/{id}:
    patch:
      tags:
        - Usuários
      summary: Atualiza o perfil do usuário
      description: Permite que o usuário autenticado atualize seus próprios dados. Requer autenticação.
      operationId: editUser
      parameters:
        - name: id
          in: path
          required: true
          description: ID do Usuário a ser editado (MongoDB ObjectId). Deve ser o ID do usuário autenticado.
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "60d0fe4f5311236168a109cb"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: Usuário atualizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuário atualizado com sucesso!"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '403':
          description: Acesso negado (tentando editar perfil de outro usuário).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Usuário não encontrado para edição.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '409':
          description: Conflito (e-mail já em uso por outro usuário).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '422':
          description: Dados inválidos (campos obrigatórios, formato de e-mail, senhas não conferem).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /users/delete/{id}:
    delete:
      tags:
        - Usuários
      summary: Deleta a conta do usuário
      description: Permite que o usuário autenticado delete sua própria conta e todos os pets associados. Requer autenticação.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: ID do Usuário a ser deletado (MongoDB ObjectId). Deve ser o ID do usuário autenticado.
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "60d0fe4f5311236168a109cb"
      responses:
        '200':
          description: Usuário removido com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuário removido com sucesso."
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '403':
          description: Acesso negado (tentando deletar conta de outro usuário).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Usuário não encontrado para deleção.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets/create:
    post:
      tags:
        - Pets
      summary: Cadastra um novo pet
      description: Adiciona um novo pet ao sistema para adoção. Requer autenticação.
      operationId: createPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetInput'
      responses:
        '201':
          description: Pet cadastrado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pet cadastado com sucesso!"
                  newPet:
                    $ref: '#/components/schemas/Pet'
        '422':
          description: Erro de validação nos dados enviados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado (token inválido ou ausente).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets:
    get:
      tags:
        - Pets
      summary: Lista todos os pets
      description: Retorna uma lista de todos os pets cadastrados no sistema, ordenados por data de criação (mais recentes primeiro). Não requer autenticação.
      operationId: getAllPets
      security: []
      responses:
        '200':
          description: Lista de pets retornada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets/mypets:
    get:
      tags:
        - Pets
      summary: Lista os pets cadastrados pelo usuário logado
      description: Retorna uma lista dos pets que o usuário autenticado cadastrou. Requer autenticação.
      operationId: getAllUserPets
      responses:
        '200':
          description: Lista de pets do usuário.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID do Pet (MongoDB ObjectId).
        schema:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "60d0fe4f5311236168a109ca"
    get:
      tags:
        - Pets
      summary: Busca um pet pelo ID
      description: Retorna detalhes de um pet específico. Não requer autenticação.
      operationId: getPetById
      security: []
      responses:
        '200':
          description: Detalhes do pet.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/Pet'
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Pet não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
    patch:
      tags:
        - Pets
      summary: Atualiza um pet
      description: Atualiza os dados de um pet existente. O usuário deve ser o dono do pet. Requer autenticação.
      operationId: updatePet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdateInput'
      responses:
        '200':
          description: Pet atualizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pet atualizado com sucesso!"
                  data:
                    $ref: '#/components/schemas/PetUpdateInput'
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '403':
          description: Acesso negado (usuário não é o dono do pet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Pet não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '422':
          description: Dados inválidos (campos obrigatórios faltando).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
    delete:
      tags:
        - Pets
      summary: Remove um pet
      description: Remove um pet do sistema. O usuário deve ser o dono do pet. Requer autenticação.
      operationId: removePetById
      responses:
        '200':
          description: Pet removido com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pet removido com sucesso!"
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '403':
          description: Acesso negado (usuário não é o dono do pet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Pet não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets/schedule/{id}:
    patch:
      tags:
        - Adoção
      summary: Agenda uma visita para um pet
      description: Permite que um usuário autenticado (que não seja o dono) agende uma visita para um pet disponível. Requer autenticação.
      operationId: schedulePetVisit
      parameters:
        - name: id
          in: path
          required: true
          description: ID do Pet para o qual agendar a visita (MongoDB ObjectId).
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "60d0fe4f5311236168a109ca"
      responses:
        '200':
          description: Visita agendada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "A visita foi agendada com sucesso, entre em contato com DonoDoPet pelo telefone (11) 99999-8888"
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Pet não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '409':
          description: Conflito (ex: tentando agendar visita para próprio pet, já agendado, pet não disponível).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
  /pets/conclude/{id}:
    patch:
      tags:
        - Adoção
      summary: Conclui o processo de adoção de um pet
      description: Marca um pet como não mais disponível. Somente o usuário que cadastrou o pet pode realizar esta ação. Requer autenticação.
      operationId: concludePetAdoption
      parameters:
        - name: id
          in: path
          required: true
          description: ID do Pet cuja adoção será concluída (MongoDB ObjectId).
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "60d0fe4f5311236168a109ca"
      responses:
        '200':
          description: Adoção concluída com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Parabéns! O ciclo de adoção foi finalizado com sucesso!"
        '400':
          description: ID Inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '401':
          description: Não autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '403':
          description: Acesso negado (usuário não é o dono do pet).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Pet não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '500':
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
